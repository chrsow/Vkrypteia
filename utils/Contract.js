// import { } from 'react-native';
import store from './store';
import getWeb3 from './getWeb3';
import Tx from 'ethereumjs-tx';
import find from 'lodash/find';
import { updateContract } from '../reducers/contract';
import { utcParse } from 'd3-time-format';

// import solc from 'solc';
// import fs from 'fs';

const web3 = getWeb3();

const { user, contract } = store.getState();
const { address } = user;
let { privateKey } = user;
privateKey = Buffer.from(privateKey, 'hex');
// const { contractAddress }  = contract;

const contractAbi = contract.contractAbi;
// contractBytecode must has 0x prefix
const contractBytecode = '0x6060604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040805190810160405280600f81526020017f4e6f207175657374696f6e2073657400000000000000000000000000000000008152506008908051906020019062000091929190620000bd565b506000600c60006101000a81548160ff02191690836003811115620000b257fe5b02179055506200016c565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200010057805160ff191683800117855562000131565b8280016001018555821562000131579182015b828111156200013057825182559160200191906001019062000113565b5b50905062000140919062000144565b5090565b6200016991905b80821115620001655760008160009055506001016200014b565b5090565b90565b611beb806200017c6000396000f300606060405260043610610107576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630713b13914610109578063078002ac1461015a5780630997a83a146101a75780631aa3a008146101f857806320ace3fe1461029157806333a53230146103725780633fad9ae01461039b5780634a8a62ab146104295780638da5cb5b146104c2578063927416c014610517578063a300e22414610540578063ab7df67a14610569578063b2dd5c071461057e578063b3a2273f146105cf578063c19d93fb146105f8578063da58c7d91461062f578063edf26d9b14610714578063f2fde38b14610777578063fca4be41146107b0575b005b341561011457600080fd5b610140600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506108d8565b604051808215151515815260200191505060405180910390f35b341561016557600080fd5b610191600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506108f8565b6040518082815260200191505060405180910390f35b34156101b257600080fd5b6101ba610910565b6040518082600260200280838360005b838110156101e55780820151818401526020810190506101ca565b5050505090500191505060405180910390f35b341561020357600080fd5b61020b610c2b565b604051808315151515815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561025557808201518184015260208101905061023a565b50505050905090810190601f1680156102825780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b341561029c57600080fd5b6102ec600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610fed565b604051808315151515815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561033657808201518184015260208101905061031b565b50505050905090810190601f1680156103635780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b341561037d57600080fd5b6103856111b1565b6040518082815260200191505060405180910390f35b34156103a657600080fd5b6103ae6111b7565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103ee5780820151818401526020810190506103d3565b50505050905090810190601f16801561041b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561043457600080fd5b61043c611255565b604051808315151515815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561048657808201518184015260208101905061046b565b50505050905090810190601f1680156104b35780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b34156104cd57600080fd5b6104d56113a3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561052257600080fd5b61052a6113c8565b6040518082815260200191505060405180910390f35b341561054b57600080fd5b6105536113ce565b6040518082815260200191505060405180910390f35b341561057457600080fd5b61057c6113d4565b005b341561058957600080fd5b6105b5600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611448565b604051808215151515815260200191505060405180910390f35b34156105da57600080fd5b6105e2611468565b6040518082815260200191505060405180910390f35b341561060357600080fd5b61060b61146e565b6040518082600381111561061b57fe5b60ff16815260200191505060405180910390f35b341561063a57600080fd5b6106506004808035906020019091905050611481565b604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001841515151581526020018315151515815260200180602001828103825283818151815260200191508051906020019080838360005b838110156106d65780820151818401526020810190506106bb565b50505050905090810190601f1680156107035780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b341561071f57600080fd5b6107356004808035906020019091905050611583565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561078257600080fd5b6107ae600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506115c2565b005b610852600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080359060200190919080359060200190919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509190505061169c565b604051808315151515815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561089c578082015181840152602081019050610881565b50505050905090810190601f1680156108c95780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b60046020528060005260406000206000915054906101000a900460ff1681565b60026020528060005260406000206000915090505481565b61091861199c565b6109206119c6565b6000600280600381111561093057fe5b600c60009054906101000a900460ff16600381111561094b57fe5b14151561095757600080fd5b600091505b600180549050821015610c22576003600083815260200190815260200160002060000160159054906101000a900460ff1680156109b957506003600083815260200190815260200160002060000160149054906101000a900460ff165b15610c1557600360008381526020019081526020016000206001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a685780601f10610a3d57610100808354040283529160200191610a68565b820191906000526020600020905b815481529060010190602001808311610a4b57829003601f168201915b5050505050925060405180807f79657300000000000000000000000000000000000000000000000000000000008152506003019050604051809103902060001916836040518082805190602001908083835b602083101515610adf5780518252602082019150602081019050602083039250610aba565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415610b43576001846000600281101515610b2757fe5b602002018181510191509060ff16908160ff1681525050610c14565b60405180807f6e6f0000000000000000000000000000000000000000000000000000000000008152506002019050604051809103902060001916836040518082805190602001908083835b602083101515610bb35780518252602082019150602081019050602083039250610b8e565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415610c13576001846001600281101515610bfb57fe5b602002018181510191509060ff16908160ff16815250505b5b5b818060010192505061095c565b83935050505090565b6000610c356119c6565b6001806003811115610c4357fe5b600c60009054906101000a900460ff166003811115610c5e57fe5b141515610c6a57600080fd5b600a54421115610cb557600092506040805190810160405280601481526020017f526567736974726174696f6e2074696d657375700000000000000000000000008152509150610fe7565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610d4957600092506040805190810160405280601481526020017f596f75277265206e6f7420656c696769626c652e0000000000000000000000008152509150610fe8565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610ddc57600092506040805190810160405280601a81526020017f596f7527726520616c726561647920726567697374657265642e0000000000008152509150610fe6565b600654600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506080604051908101604052803373ffffffffffffffffffffffffffffffffffffffff168152602001600115158152602001600015158152602001602060405190810160405280600081525081525060036000600654815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548160ff02191690831515021790555060408201518160000160156101000a81548160ff0219169083151502179055506060820151816001019080519060200190610f289291906119da565b509050506001600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060016006600082825401925050819055507f640cfad995238c39f105b2884a2e9d3b1482d753cdcc97f2e7db4192e89121a86006546040518082815260200191505060405180910390a160019250602060405190810160405280600081525091505b5b5b509091565b6000610ff7611a5a565b600033600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561105257600080fd5b600280600381111561106057fe5b600c60009054906101000a900460ff16600381111561107b57fe5b14151561108757600080fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549250856003600085815260200190815260200160002060010190805190602001906110f3929190611a6e565b5060016003600085815260200190815260200160002060000160156101000a81548160ff02191690831515021790555060016007600082825401925050819055507f88b444ca33295b45711e834dbd535cb7d5b1a30bfb46db2a81d86533f804b47e6007546040518082815260200191505060405180910390a1600194506040805190810160405280600f81526020017f566f7465207375636365737365642e00000000000000000000000000000000008152509350505050915091565b600a5481565b60088054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561124d5780601f106112225761010080835404028352916020019161124d565b820191906000526020600020905b81548152906001019060200180831161123057829003601f168201915b505050505081565b600061125f6119c6565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112ba57600080fd5b60018060038111156112c857fe5b600c60009054906101000a900460ff1660038111156112e357fe5b1415156112ef57600080fd5b600060065414156113625760009250606060405190810160405280602581526020017f5265717569726564206174206c65617374206f6e65207265676973746572642081526020017f766f746572000000000000000000000000000000000000000000000000000000815250915061139e565b6002600c60006101000a81548160ff0219169083600381111561138157fe5b021790555060019250602060405190810160405280600081525091505b509091565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60065481565b600b5481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561142f57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff16ff5b60056020528060005260406000206000915054906101000a900460ff1681565b60075481565b600c60009054906101000a900460ff1681565b60036020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900460ff16908060000160159054906101000a900460ff1690806001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115795780601f1061154e57610100808354040283529160200191611579565b820191906000526020600020905b81548152906001019060200180831161155c57829003601f168201915b5050505050905084565b60018181548110151561159257fe5b90600052602060002090016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561161d57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561165957600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006116a66119c6565b6000808060038111156116b557fe5b600c60009054906101000a900460ff1660038111156116d057fe5b1415156116dc57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561173757600080fd5b600086101561178157600093506040805190810160405280601c81526020017f566f74696e672074696d65206d75737420626520706f736974697665000000008152509250611991565b600088511115156117cd57600093506040805190810160405280601a81526020017f5175657374696f6e206d757374206e6f7420626520626c616e6b0000000000008152509250611991565b87600890805190602001906117e3929190611aee565b50600091505b845182101561194357600160046000878581518110151561180657fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600180548060010182816118759190611b6e565b91600052602060002090016000878581518110151561189057fe5b90602001906020020151909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050816002600087858151811015156118ee57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081806001019250506117e9565b6001600c60006101000a81548160ff0219169083600381111561196257fe5b0217905550864201600a81905550854201600b8190555060019350602060405190810160405280600081525092505b505094509492505050565b60408051908101604052806002905b600060ff168152602001906001900390816119ab5790505090565b602060405190810160405280600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611a1b57805160ff1916838001178555611a49565b82800160010185558215611a49579182015b82811115611a48578251825591602001919060010190611a2d565b5b509050611a569190611b9a565b5090565b602060405190810160405280600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611aaf57805160ff1916838001178555611add565b82800160010185558215611add579182015b82811115611adc578251825591602001919060010190611ac1565b5b509050611aea9190611b9a565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611b2f57805160ff1916838001178555611b5d565b82800160010185558215611b5d579182015b82811115611b5c578251825591602001919060010190611b41565b5b509050611b6a9190611b9a565b5090565b815481835581811511611b9557818360005260206000209182019101611b949190611b9a565b5b505050565b611bbc91905b80821115611bb8576000816000905550600101611ba0565b5090565b905600a165627a7a7230582022bc04b5cc2d592e92c7bfed98001c55fbdd8b3cae3a85a73f7cd68f4e7db6370029';

class Contract {
  // For deploy contract
  async deploy(){
    // let result;

    let contractInstance2 = new web3.eth.Contract(contractAbi);

    let nonce = web3.utils.toHex(await web3.eth.getTransactionCount(address)); 
    let gasPrice = web3.utils.toHex(await web3.eth.getGasPrice());
    // let gasLimit =  await contractInstance2.deploy({data: contractBytecode}).estimateGas();
    let gasLimit =  web3.utils.toHex(3000000);
    let data = contractInstance2.deploy({data: contractBytecode}).encodeABI();

    let txParams = {
      // to: contractAddress, 
      gasPrice
      , gasLimit, nonce, data
    }

    let tx = new Tx(txParams);
    tx.sign(privateKey);
    let serializedTx = tx.serialize().toString('hex');

    try{
      let contractObject = await web3.eth.sendSignedTransaction('0x' + serializedTx);
      let { contractAddress } = contractObject;
      return contractAddress;
      // console.log('Contract Address: ' + contractAddress);
      // await store.dispatch(updateContract(contractAddress),()=>{
      //   return true;  
      // });
      
    
    }catch(e){
      // result = false;
    }
  
    // return result; 
  }

  async _call(method, params=[], contractInstance) {
    return await contractInstance.methods[method](...params).call({
      from: address,
    });
  }

  async call(contractAddress, method, params=[]){
    let result;

    const contractInstance = new web3.eth.Contract(contractAbi, contractAddress);
    // Find object of specified 'method' in contract's abi
    let { constant } = find(contractAbi, {name: method});

    // 'constant' type, no state modification
    if (constant) {
      // result = await contractInstance.methods[method](...params).call({
      //   from: address,
      // });
      result = this._call(method, params, contractInstance);
    } else { // has to send transaction to call method
      let nonce = web3.utils.toHex(await web3.eth.getTransactionCount(address)); 
      let gasPrice = web3.utils.toHex(await web3.eth.getGasPrice());
      // let gasLimit = web3.utils.toHex(await contractInstance.methods[method](...params).estimateGas());
      let gasLimit = web3.utils.toHex(3000000);
      let data = contractInstance.methods[method](...params).encodeABI();

      let txParams = {
        to: contractAddress, 
        gasPrice
        , gasLimit, nonce, data
      }

      let tx = new Tx(txParams);
      tx.sign(privateKey);
      let serializedTx = tx.serialize().toString('hex');

      // 1. Send transacition to change contract state
      await web3.eth.sendSignedTransaction('0x' + serializedTx, (err, res) => {
        if(!err){
          // 2. Get contract state 
          result = this._call(method, params, contractInstance);
        }
      });
      
    }
    return result;
  }
}

// const gasPrice = web3.utils.toHex(await web3.eth.getGasPrice());
const contractClass = new Contract();
export default contractClass;