import store from './store';
import getWeb3 from './getWeb3';
import Tx from 'ethereumjs-tx';
import find from 'lodash/find';
import { updateContract } from '../reducers/contract';
import { utcParse } from 'd3-time-format';

const web3 = getWeb3();

const { contract:{contractAbi} } = store.getState();

// contractBytecode must has 0x prefix
const contractBytecode = '0x6060604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040805190810160405280600f81526020017f4e6f207175657374696f6e2073657400000000000000000000000000000000008152506009908051906020019062000091929190620000bd565b506000600d60006101000a81548160ff02191690836003811115620000b257fe5b02179055506200016c565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200010057805160ff191683800117855562000131565b8280016001018555821562000131579182015b828111156200013057825182559160200191906001019062000113565b5b50905062000140919062000144565b5090565b6200016991905b80821115620001655760008160009055506001016200014b565b5090565b90565b611c5a806200017c6000396000f300606060405260043610610112576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630713b13914610114578063078002ac146101655780630997a83a146101b25780631aa3a0081461020357806320ace3fe1461029c5780633138ffe71461037d57806333a53230146103a65780633fad9ae0146103cf5780634a8a62ab1461045d5780638da5cb5b146104f6578063927416c01461054b578063a300e22414610574578063ab7df67a1461059d578063b2dd5c07146105b2578063b3a2273f14610603578063c19d93fb1461062c578063da58c7d914610663578063edf26d9b14610748578063f2fde38b146107ab578063fca4be41146107e4575b005b341561011f57600080fd5b61014b600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061090c565b604051808215151515815260200191505060405180910390f35b341561017057600080fd5b61019c600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061092c565b6040518082815260200191505060405180910390f35b34156101bd57600080fd5b6101c5610944565b6040518082600260200280838360005b838110156101f05780820151818401526020810190506101d5565b5050505090500191505060405180910390f35b341561020e57600080fd5b610216610c5f565b604051808315151515815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610260578082015181840152602081019050610245565b50505050905090810190601f16801561028d5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b34156102a757600080fd5b6102f7600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050611021565b604051808315151515815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610341578082015181840152602081019050610326565b50505050905090810190601f16801561036e5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b341561038857600080fd5b6103906111e5565b6040518082815260200191505060405180910390f35b34156103b157600080fd5b6103b96111eb565b6040518082815260200191505060405180910390f35b34156103da57600080fd5b6103e26111f1565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610422578082015181840152602081019050610407565b50505050905090810190601f16801561044f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561046857600080fd5b61047061128f565b604051808315151515815260200180602001828103825283818151815260200191508051906020019080838360005b838110156104ba57808201518184015260208101905061049f565b50505050905090810190601f1680156104e75780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b341561050157600080fd5b610509611409565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561055657600080fd5b61055e61142e565b6040518082815260200191505060405180910390f35b341561057f57600080fd5b610587611434565b6040518082815260200191505060405180910390f35b34156105a857600080fd5b6105b061143a565b005b34156105bd57600080fd5b6105e9600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506114ae565b604051808215151515815260200191505060405180910390f35b341561060e57600080fd5b6106166114ce565b6040518082815260200191505060405180910390f35b341561063757600080fd5b61063f6114d4565b6040518082600381111561064f57fe5b60ff16815260200191505060405180910390f35b341561066e57600080fd5b61068460048080359060200190919050506114e7565b604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001841515151581526020018315151515815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561070a5780820151818401526020810190506106ef565b50505050905090810190601f1680156107375780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b341561075357600080fd5b61076960048080359060200190919050506115e9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156107b657600080fd5b6107e2600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611628565b005b610886600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001909190803590602001909190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091905050611702565b604051808315151515815260200180602001828103825283818151815260200191508051906020019080838360005b838110156108d05780820151818401526020810190506108b5565b50505050905090810190601f1680156108fd5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b60046020528060005260406000206000915054906101000a900460ff1681565b60026020528060005260406000206000915090505481565b61094c611a0b565b610954611a35565b6000600280600381111561096457fe5b600d60009054906101000a900460ff16600381111561097f57fe5b14151561098b57600080fd5b600091505b600180549050821015610c56576003600083815260200190815260200160002060000160159054906101000a900460ff1680156109ed57506003600083815260200190815260200160002060000160149054906101000a900460ff165b15610c4957600360008381526020019081526020016000206001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a9c5780601f10610a7157610100808354040283529160200191610a9c565b820191906000526020600020905b815481529060010190602001808311610a7f57829003601f168201915b5050505050925060405180807f79657300000000000000000000000000000000000000000000000000000000008152506003019050604051809103902060001916836040518082805190602001908083835b602083101515610b135780518252602082019150602081019050602083039250610aee565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415610b77576001846000600281101515610b5b57fe5b602002018181510191509060ff16908160ff1681525050610c48565b60405180807f6e6f0000000000000000000000000000000000000000000000000000000000008152506002019050604051809103902060001916836040518082805190602001908083835b602083101515610be75780518252602082019150602081019050602083039250610bc2565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415610c47576001846001600281101515610c2f57fe5b602002018181510191509060ff16908160ff16815250505b5b5b8180600101925050610990565b83935050505090565b6000610c69611a35565b6001806003811115610c7757fe5b600d60009054906101000a900460ff166003811115610c9257fe5b141515610c9e57600080fd5b600b54421115610ce957600092506040805190810160405280601481526020017f526567736974726174696f6e2074696d65737570000000000000000000000000815250915061101b565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610d7d57600092506040805190810160405280601481526020017f596f75277265206e6f7420656c696769626c652e000000000000000000000000815250915061101c565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610e1057600092506040805190810160405280601a81526020017f596f7527726520616c726561647920726567697374657265642e000000000000815250915061101a565b600754600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506080604051908101604052803373ffffffffffffffffffffffffffffffffffffffff168152602001600115158152602001600015158152602001602060405190810160405280600081525081525060036000600754815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548160ff02191690831515021790555060408201518160000160156101000a81548160ff0219169083151502179055506060820151816001019080519060200190610f5c929190611a49565b509050506001600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060016007600082825401925050819055507f640cfad995238c39f105b2884a2e9d3b1482d753cdcc97f2e7db4192e89121a86007546040518082815260200191505060405180910390a160019250602060405190810160405280600081525091505b5b5b509091565b600061102b611ac9565b600033600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561108657600080fd5b600280600381111561109457fe5b600d60009054906101000a900460ff1660038111156110af57fe5b1415156110bb57600080fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054925085600360008581526020019081526020016000206001019080519060200190611127929190611add565b5060016003600085815260200190815260200160002060000160156101000a81548160ff02191690831515021790555060016008600082825401925050819055507f88b444ca33295b45711e834dbd535cb7d5b1a30bfb46db2a81d86533f804b47e6008546040518082815260200191505060405180910390a1600194506040805190810160405280600f81526020017f566f7465207375636365737365642e00000000000000000000000000000000008152509350505050915091565b60065481565b600b5481565b60098054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112875780601f1061125c57610100808354040283529160200191611287565b820191906000526020600020905b81548152906001019060200180831161126a57829003601f168201915b505050505081565b6000611299611a35565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112f457600080fd5b600180600381111561130257fe5b600d60009054906101000a900460ff16600381111561131d57fe5b14151561132957600080fd5b6000600754141561139c5760009250606060405190810160405280602581526020017f5265717569726564206174206c65617374206f6e65207265676973746572642081526020017f766f7465720000000000000000000000000000000000000000000000000000008152509150611404565b6002600d60006101000a81548160ff021916908360038111156113bb57fe5b021790555060019250602060405190810160405280600081525091507fff943e3acd716e2fcabd820664625e39f1109becc62028e641f776cab25e12db60405160405180910390a15b509091565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60075481565b600c5481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561149557600080fd5b3373ffffffffffffffffffffffffffffffffffffffff16ff5b60056020528060005260406000206000915054906101000a900460ff1681565b60085481565b600d60009054906101000a900460ff1681565b60036020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900460ff16908060000160159054906101000a900460ff1690806001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115df5780601f106115b4576101008083540402835291602001916115df565b820191906000526020600020905b8154815290600101906020018083116115c257829003601f168201915b5050505050905084565b6001818154811015156115f857fe5b90600052602060002090016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561168357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156116bf57600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600061170c611a35565b60008080600381111561171b57fe5b600d60009054906101000a900460ff16600381111561173657fe5b14151561174257600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561179d57600080fd5b60008610156117e757600093506040805190810160405280601c81526020017f566f74696e672074696d65206d75737420626520706f736974697665000000008152509250611a00565b6000885111151561183357600093506040805190810160405280601a81526020017f5175657374696f6e206d757374206e6f7420626520626c616e6b0000000000008152509250611a00565b8760099080519060200190611849929190611b5d565b508451600681905550600091505b6006548210156119b257600160046000878581518110151561187557fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600180548060010182816118e49190611bdd565b9160005260206000209001600087858151811015156118ff57fe5b90602001906020020151909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508160026000878581518110151561195d57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508180600101925050611857565b6001600d60006101000a81548160ff021916908360038111156119d157fe5b0217905550864201600b81905550854201600c8190555060019350602060405190810160405280600081525092505b505094509492505050565b60408051908101604052806002905b600060ff16815260200190600190039081611a1a5790505090565b602060405190810160405280600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611a8a57805160ff1916838001178555611ab8565b82800160010185558215611ab8579182015b82811115611ab7578251825591602001919060010190611a9c565b5b509050611ac59190611c09565b5090565b602060405190810160405280600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611b1e57805160ff1916838001178555611b4c565b82800160010185558215611b4c579182015b82811115611b4b578251825591602001919060010190611b30565b5b509050611b599190611c09565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611b9e57805160ff1916838001178555611bcc565b82800160010185558215611bcc579182015b82811115611bcb578251825591602001919060010190611bb0565b5b509050611bd99190611c09565b5090565b815481835581811511611c0457818360005260206000209182019101611c039190611c09565b5b505050565b611c2b91905b80821115611c27576000816000905550600101611c0f565b5090565b905600a165627a7a72305820508faac5f97262f52fcc262568811a0087efaa0b29bd2e1909e57dffd1159b630029';

class Contract {
  // For deploy contract
  async deploy(address, privateKey){
    // let result;

    let contractInstance = new web3.eth.Contract(contractAbi);

    let nonce = web3.utils.toHex(await web3.eth.getTransactionCount(address)); 
    let gasPrice = web3.utils.toHex(await web3.eth.getGasPrice());
    // let gasLimit =  await contractInstance.deploy({data: contractBytecode}).estimateGas();
    let gasLimit =  web3.utils.toHex(3000000);
    let data = contractInstance.deploy({data: contractBytecode}).encodeABI();

    let txParams = {
      // to: contractAddress, 
      gasPrice
      , gasLimit, nonce, data
    }

    let tx = new Tx(txParams);
    tx.sign(privateKey);
    let serializedTx = tx.serialize().toString('hex');
    
    try{
      let contractObject = await web3.eth.sendSignedTransaction('0x' + serializedTx);
      
      let { contractAddress } = contractObject;

      return contractAddress;
      // console.log('Contract Address: ' + contractAddress);
      // await store.dispatch(updateContract(contractAddress),()=>{
      //   return true;  
      // });
      
    
    }catch(e){
      // result = false;
    }
  
    // return result; 
  }

  async _call(method, params=[], contractInstance, address) {
    return await contractInstance.methods[method](...params).call({
      from: address,
    });
  }

  async call(address, privateKey, contractAddress, method, params=[]){
    let result;

    const contractInstance = new web3.eth.Contract(contractAbi, contractAddress);
    // Find object of specified 'method' in contract's abi
    let { constant } = find(contractAbi, {name: method});

    // 'constant' type, no state modification
    if (constant) {
      // result = await contractInstance.methods[method](...params).call({
      //   from: address,
      // });
      result = this._call(method, params, contractInstance, address);
    } else { // has to send transaction to call method
      let nonce = web3.utils.toHex(await web3.eth.getTransactionCount(address)); 
      let gasPrice = web3.utils.toHex(await web3.eth.getGasPrice());
      // let gasLimit = web3.utils.toHex(await contractInstance.methods[method](...params).estimateGas());
      let gasLimit = web3.utils.toHex(3000000);
      let data = contractInstance.methods[method](...params).encodeABI();

      let txParams = {
        to: contractAddress, 
        gasPrice
        , gasLimit, nonce, data
      }

      let tx = new Tx(txParams);
      tx.sign(privateKey);
      let serializedTx = tx.serialize().toString('hex');

      // 1. Send transacition to change contract state
      await web3.eth.sendSignedTransaction('0x' + serializedTx, (err, res) => {
        if(!err){
          // 2. Get contract state 
          result = this._call(method, params, contractInstance, address);
        }
      });
      
    }
    return result;
  }
}

// const gasPrice = web3.utils.toHex(await web3.eth.getGasPrice());
const contractClass = new Contract();
export default contractClass;